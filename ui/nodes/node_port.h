/****************************************************************************
**
* *Copyright (C) 2014
**
* *This file is generated by the Magus toolkit
**
* *THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
* *"AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
* *LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
* *A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
* *OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
* *SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
* *LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
* *DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
* *THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
* *(INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
* *OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE."
**
****************************************************************************/

#pragma once

#include <QGraphicsItem>
#include <QGraphicsPathItem>
#include <QGraphicsTextItem>
#include <QBrush>

#include "node_constants.h"
#include "node_porttype.h"
#include "node_connection.h"

enum QtPortShape {
	PORT_SHAPE_CIRCLE,
	PORT_SHAPE_SQUARE
};

static constexpr auto NODE_PORT_TYPE_INPUT = 1; /* Reserved for input port */
static constexpr auto NODE_PORT_TYPE_OUTPUT = 2; /* Reserved for output port */

static constexpr auto NODE_PORT_FONT_SIZE = 10;
static constexpr auto NODE_PORT_SHAPE_SIZE = 10;
static constexpr auto NODE_PORT_OFFSET = 10.0f;
static constexpr auto NODE_PORT_WIDTH_MARGIN = 10.0f; /* Margin in pixel value */
static constexpr auto NODE_PORT_HEIGHT_MARGIN_FACTOR = 0.8f; /* Margin factor in fraction of text height */

/****************************************************************************
 * QtPort represents a Port-class which is visualised in a QtNode.
 * A QtPort can be connected to another port under certain conditions. These
 * conditions are defined by mean of a Policy
 ***************************************************************************/
class QtPort : public QGraphicsPathItem {
	unsigned int m_port_id;
	QString m_port_name;
	QtPortType m_port_type;
	QColor m_port_colour;
	QColor m_connection_colour;
	QtPortShape m_port_shape;
	Alignment m_alignment;
	qreal m_zoom;
	QGraphicsItem *m_parent;
	QGraphicsTextItem *m_label;
	QFont m_font;
	bool m_port_open;
	QtConnection *m_connection;
	bool m_connection_is_base;
	QPointF m_original_pos;
	QtPort *m_copy_of_port;

public:
	QtPort(unsigned int portId,
	       const QString &portName,
	       QtPortType portType,
	       QColor portColour,
	       QColor connectionColour,
	       QtPortShape portShape,
	       Alignment alignment,
	       qreal zoom,
	       QGraphicsItem *parent = nullptr);

	virtual ~QtPort() = default;

	/* Scale the port */
	void setZoom(qreal zoom);

	/* Redraw the port */
	void redraw();

	/* Set the color of the portName */
	void setNameColor(const QColor &color);

	/* Returns the width when the port is not zoomed */
	qreal getNormalizedWidth();

	/* Returns the height when the port is not zoomed */
	qreal getNormalizedHeight();

	/* Set the position according to its */
	void setAlignedPos(const QPointF &pos);
	void setAlignedPos(qreal x, qreal y);

	/* Set a port open or closed; if the port is closed, no connection can be
	 * made or there is already a connection */
	void setPortOpen(bool open);

	/* Create a connection on this port. The port acts as base or a target */
	QtConnection *createConnection(QtConnection *targetConnection = nullptr);

	/* Set a connection to this port. This is an existing connection. If base is
	 * set to 'true', this port becomes the base port; otherwise the target port */
	void setConnection(QtConnection *connection, bool base);

	/* Delete the connection of this port. */
	void deleteConnection();
	void informConnectionDeleted();

	/* Return the connection of this port. The port can act as base- or target-port. */
	QtConnection *getConnection() const;

	/* Update the base connection (redraw the connection for which this port is base) */
	void updateConnection(const QPointF &altTargetPos = QPointF(0.0f, 0.0f));

	/* Check whether 'this' port is allow to connect to the port, given as an argument */
	/* The porttype of each port is compared. */
	bool isConnectionAllowed(QtPort *portToConnect);

	/* Return true is this port is the base port of a connection */
	bool isBasePort();

	/* Return true is this port is the target port of a connection */
	bool isTargetPort();

	/* Hide the port and move the endpoint of the connection to the header of the node */
	void collapse();

	/* Make the port visible and restore the endpoint of the connection */
	void expand();

	/* If the port is a copy of another port, its pointer can be passed as a
	 * reference. Nothing is done with this value */
	void setCopyOfPort(QtPort *port);

	/* Getters */
	unsigned int getPortId() const { return m_port_id; }
	const QString &getPortName() const { return m_port_name; }
	Alignment getAlignment() const { return m_alignment; }
	QtPortType getPortType() const { return m_port_type; }
	QColor getPortColour() const { return m_port_colour; }
	QColor getConnectionColour() const { return m_connection_colour; }
	QtPortShape getPortShape() const { return m_port_shape; }
	bool isPortOpen() const { return m_port_open; }
	QtPort *getCopyOfPort() const { return m_copy_of_port; }
};
