/****************************************************************************
**
 **Copyright (C) 2014
**
 **This file is generated by the Magus toolkit
**
 **THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
 **"AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
 **LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
 **A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
 **OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
 **SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
 **LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
 **DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
 **THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 **(INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
 **OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE."
**
****************************************************************************/

#include "node_compound.h"

#include "node_editorwidget.h"
#include "node_port.h"
#include "node_scene.h"

ObjectNodeItem::ObjectNodeItem(Object *object, const QString &title, QGraphicsItem *parent)
    : QtNode(title, parent)
    , m_node_scene(new QtNodeGraphicsScene)
    , m_object(object)
{
	setData(NODE_KEY_GRAPHIC_ITEM_SUBTYPE, QVariant(NODE_VALUE_SUBTYPE_OBJECT));
}

ObjectNodeItem::~ObjectNodeItem()
{
	/* First release the nodes */
	for (QtNode *node : m_node_list) {
		removeNode(node);
	}

	m_node_list.clear();

	delete m_node_scene;
}

void ObjectNodeItem::addNode(QtNode *node)
{
	m_node_list.push_back(node);
	node->setParentItem(this);
	m_node_scene->addItem(node);
}

void ObjectNodeItem::removeNode(QtNode *node)
{
	auto iter = std::find(m_node_list.begin(), m_node_list.end(), node);
	m_node_list.erase(iter);
}

bool ObjectNodeItem::isNodeOfThisCompound(QtNode *node) const
{
	auto iter = std::find(m_node_list.begin(), m_node_list.end(), node);
	return iter != m_node_list.end();
}

const QVector<QtNode *> &ObjectNodeItem::getNodes() const
{
	return m_node_list;
}

QtNodeGraphicsScene *ObjectNodeItem::nodeScene() const
{
	return m_node_scene;
}

Object *ObjectNodeItem::object() const
{
	return m_object;
}
